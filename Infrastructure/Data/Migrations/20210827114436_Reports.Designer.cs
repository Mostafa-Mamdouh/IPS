// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(IPSContext))]
    [Migration("20210827114436_Reports")]
    partial class Reports
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Core.Entities.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreateUserId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UpdateUserId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Core.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Core.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CountryId" }, "IX_City_CountryId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("Core.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<int>("CreateUserId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RepresentativeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TaxReferenceNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UpdateUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("Core.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("Core.Entities.Credit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("BankCredit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("CashCredit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreateUserId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UpdateUserId")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("Credit");
                });

            modelBuilder.Entity("Core.Entities.Expense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("ChequeNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<int>("CreateUserId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("ExpenseTypeId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime");

                    b.Property<string>("TransferNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int>("UpdateUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("ExpenseTypeId");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("Expense");
                });

            modelBuilder.Entity("Core.Entities.ExpenseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ExpenseType");
                });

            modelBuilder.Entity("Core.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<int>("CreateUserId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int>("UpdateUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("UpdateUserId");

                    b.HasIndex(new[] { "CategoryId" }, "IX_Product_CategoryId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Core.Entities.PurchaseInvoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("AdditionalFees")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int?>("ArchiveId")
                        .HasColumnType("int")
                        .HasColumnName("ArchiveID");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<int>("CreateUserId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime");

                    b.Property<string>("InvoiceNumber")
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsTax")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(4,2)");

                    b.Property<decimal>("Transfer")
                        .HasColumnType("decimal(4,2)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int>("UpdateUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArchiveId");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("PurchaseInvoice");
                });

            modelBuilder.Entity("Core.Entities.PurchaseInvoicePayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(20,4)");

                    b.Property<int?>("ArchiveId")
                        .HasColumnType("int");

                    b.Property<string>("ChequeNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<int>("CreateUserId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseInvoiceId")
                        .HasColumnType("int");

                    b.Property<string>("TransferNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int>("UpdateUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArchiveId");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("PurchaseInvoiceId");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("PurchaseInvoicePayment");
                });

            modelBuilder.Entity("Core.Entities.PurchaseInvoiceProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(20,4)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseInvoiceId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseInvoiceId");

                    b.HasIndex("ServiceId");

                    b.ToTable("PurchaseInvoiceProduct");
                });

            modelBuilder.Entity("Core.Entities.SP_BankLatestTransactions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrokerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreateUserId")
                        .HasColumnType("int");

                    b.Property<decimal>("Credit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Current")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Debit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<int?>("InvoiceNumber")
                        .HasColumnType("int");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.Property<int>("Total_Count")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UpdateUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SP_BankLatestTransactions", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("Core.Entities.SP_CashLatestTransactions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrokerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreateUserId")
                        .HasColumnType("int");

                    b.Property<decimal>("Credit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Current")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Debit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<int?>("InvoiceNumber")
                        .HasColumnType("int");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.Property<int>("Total_Count")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UpdateUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SP_CashLatestTransactions", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("Core.Entities.SP_GetSalesInvoiceNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreateUserId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("SalesInvoiceNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UpdateUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SP_GetSalesInvoiceNumber", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("Core.Entities.SalesInvoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrokerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<int>("CreateUserId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("InvoiceNumber")
                        .HasColumnType("int");

                    b.Property<bool>("IsTax")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(4,2)");

                    b.Property<decimal>("Transfer")
                        .HasColumnType("decimal(4,2)");

                    b.Property<decimal?>("Transportation")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int>("UpdateUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("SalesInvoice");
                });

            modelBuilder.Entity("Core.Entities.SalesInvoicePayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(20,4)");

                    b.Property<int?>("ArchiveId")
                        .HasColumnType("int");

                    b.Property<string>("ChequeNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<int>("CreateUserId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<int>("SalesInvoiceId")
                        .HasColumnType("int");

                    b.Property<string>("TransferNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int>("UpdateUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArchiveId");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("SalesInvoiceId");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("SalesInvoicePayment");
                });

            modelBuilder.Entity("Core.Entities.SalesInvoiceProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(20,4)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SalesInvoiceId")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SalesInvoiceId");

                    b.HasIndex("ServiceId");

                    b.ToTable("SalesInvoiceProduct");
                });

            modelBuilder.Entity("Core.Entities.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<int>("CreateUserId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int>("UpdateUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("UpdateUserId");

                    b.HasIndex(new[] { "CategoryId" }, "IX_Service_CategoryId");

                    b.ToTable("Service");
                });

            modelBuilder.Entity("Core.Entities.Sp_DashboardAmounts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreateUserId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("TotalSalesAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnpaidPurchaseAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnpaidSalesAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UpdateUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Sp_DashboardAmounts", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("Core.Entities.Sp_LineChart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AprInvoice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AprPaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AugInvoice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AugPaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreateUserId")
                        .HasColumnType("int");

                    b.Property<decimal>("DecInvoice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DecPaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("FebInvoice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("FebPaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("JanInvoice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("JanPaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("JulInvoice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("JulPaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("JunInvoice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("JunPaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MarInvoice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MarPaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MayInvoice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MayPaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("NovInvoice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("NovPaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OctInvoice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OctPaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SepInvoice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SepPaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UpdateUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Sp_LineChart", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("Core.Entities.Sp_ProductSearch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreateUserId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Inbound")
                        .HasColumnType("int");

                    b.Property<int>("Outbound")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<int>("TotalCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UpdateUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Sp_ProductSearch", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("Core.Entities.Sp_PurchaseInvoiceReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AdditionalFees")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoiceValidaty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Products")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Remaining")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Services")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupplierName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TaxPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TaxReferenceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalInvoice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalPaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalProductCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalServiceCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TransferAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TransferPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sp_PurchaseInvoiceReport", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("Core.Entities.Sp_SalesInvoiceReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrokerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("InvoiceNumber")
                        .HasColumnType("int");

                    b.Property<string>("InvoiceValidaty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Products")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Remaining")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Services")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TaxPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TaxReferenceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalInvoice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalPaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalProductCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalServiceCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TransferAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TransferPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Transportation")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sp_SalesInvoiceReport", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("Core.Entities.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<int>("CreateUserId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RepresentativeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TaxReferenceNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int>("UpdateUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("Supplier");
                });

            modelBuilder.Entity("Core.Entities.SystemArchive", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("SystemArchive");
                });

            modelBuilder.Entity("Core.Entities.City", b =>
                {
                    b.HasOne("Core.Entities.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_City_Country")
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Core.Entities.Client", b =>
                {
                    b.HasOne("Core.Entities.City", "City")
                        .WithMany("Clients")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_Client_City")
                        .IsRequired();

                    b.HasOne("Core.Entities.AppUser", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUserId")
                        .HasConstraintName("FK_Client_AspNetUsers")
                        .IsRequired();

                    b.HasOne("Core.Entities.AppUser", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId")
                        .HasConstraintName("FK_Client_AspNetUsers1")
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("CreateUser");

                    b.Navigation("UpdateUser");
                });

            modelBuilder.Entity("Core.Entities.Credit", b =>
                {
                    b.HasOne("Core.Entities.AppUser", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUserId")
                        .HasConstraintName("FK_Credit_AspNetUsers")
                        .IsRequired();

                    b.HasOne("Core.Entities.AppUser", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId")
                        .HasConstraintName("FK_Credit_AspNetUsers1")
                        .IsRequired();

                    b.Navigation("CreateUser");

                    b.Navigation("UpdateUser");
                });

            modelBuilder.Entity("Core.Entities.Expense", b =>
                {
                    b.HasOne("Core.Entities.AppUser", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUserId")
                        .HasConstraintName("FK_Expense_AspNetUsers")
                        .IsRequired();

                    b.HasOne("Core.Entities.ExpenseType", "ExpenseType")
                        .WithMany("Expenses")
                        .HasForeignKey("ExpenseTypeId")
                        .HasConstraintName("FK_Expense_Type")
                        .IsRequired();

                    b.HasOne("Core.Entities.AppUser", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId")
                        .HasConstraintName("FK_Expense_AspNetUsers1")
                        .IsRequired();

                    b.Navigation("CreateUser");

                    b.Navigation("ExpenseType");

                    b.Navigation("UpdateUser");
                });

            modelBuilder.Entity("Core.Entities.Product", b =>
                {
                    b.HasOne("Core.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_Product_Category")
                        .IsRequired();

                    b.HasOne("Core.Entities.AppUser", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUserId")
                        .HasConstraintName("FK_Product_AspNetUsers")
                        .IsRequired();

                    b.HasOne("Core.Entities.AppUser", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId")
                        .HasConstraintName("FK_Product_AspNetUsers1")
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("CreateUser");

                    b.Navigation("UpdateUser");
                });

            modelBuilder.Entity("Core.Entities.PurchaseInvoice", b =>
                {
                    b.HasOne("Core.Entities.SystemArchive", "Archive")
                        .WithMany("PurchaseInvoices")
                        .HasForeignKey("ArchiveId")
                        .HasConstraintName("FK_PurchaseInvoice_SystemArchive");

                    b.HasOne("Core.Entities.AppUser", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUserId")
                        .HasConstraintName("FK_PurchaseInvoice_AspNetUsers")
                        .IsRequired();

                    b.HasOne("Core.Entities.Supplier", "Supplier")
                        .WithMany("PurchaseInvoices")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK_PurchaseInvoice_Supplier")
                        .IsRequired();

                    b.HasOne("Core.Entities.AppUser", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId")
                        .HasConstraintName("FK_PurchaseInvoice_AspNetUsers1")
                        .IsRequired();

                    b.Navigation("Archive");

                    b.Navigation("CreateUser");

                    b.Navigation("Supplier");

                    b.Navigation("UpdateUser");
                });

            modelBuilder.Entity("Core.Entities.PurchaseInvoicePayment", b =>
                {
                    b.HasOne("Core.Entities.SystemArchive", "Archive")
                        .WithMany("PurchaseInvoicePayments")
                        .HasForeignKey("ArchiveId")
                        .HasConstraintName("FK_PurchaseInvoicePayment_SystemArchive");

                    b.HasOne("Core.Entities.AppUser", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUserId")
                        .HasConstraintName("FK_PurchaseInvoicePayment_AspNetUsers")
                        .IsRequired();

                    b.HasOne("Core.Entities.PurchaseInvoice", "PurchaseInvoice")
                        .WithMany("PurchaseInvoicePayments")
                        .HasForeignKey("PurchaseInvoiceId")
                        .HasConstraintName("FK_PurchaseInvoicePayment_PurchaseInvoice")
                        .IsRequired();

                    b.HasOne("Core.Entities.AppUser", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId")
                        .HasConstraintName("FK_PurchaseInvoicePayment_AspNetUsers1")
                        .IsRequired();

                    b.Navigation("Archive");

                    b.Navigation("CreateUser");

                    b.Navigation("PurchaseInvoice");

                    b.Navigation("UpdateUser");
                });

            modelBuilder.Entity("Core.Entities.PurchaseInvoiceProduct", b =>
                {
                    b.HasOne("Core.Entities.Product", "Product")
                        .WithMany("PurchaseInvoiceProducts")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_PurchaseInvoiceProduct_Product");

                    b.HasOne("Core.Entities.PurchaseInvoice", "PurchaseInvoice")
                        .WithMany("PurchaseInvoiceProducts")
                        .HasForeignKey("PurchaseInvoiceId")
                        .HasConstraintName("FK_PurchaseInvoiceProduct_PurchaseInvoice")
                        .IsRequired();

                    b.HasOne("Core.Entities.Service", "Service")
                        .WithMany("PurchaseInvoiceProducts")
                        .HasForeignKey("ServiceId")
                        .HasConstraintName("FK_PurchaseInvoiceProduct_Service");

                    b.Navigation("Product");

                    b.Navigation("PurchaseInvoice");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Core.Entities.SalesInvoice", b =>
                {
                    b.HasOne("Core.Entities.Client", "Client")
                        .WithMany("SalesInvoices")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FK_SalesInvoice_Client")
                        .IsRequired();

                    b.HasOne("Core.Entities.AppUser", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUserId")
                        .HasConstraintName("FK_SalesInvoice_AspNetUsers")
                        .IsRequired();

                    b.HasOne("Core.Entities.AppUser", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId")
                        .HasConstraintName("FK_SalesInvoice_AspNetUsers1")
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("CreateUser");

                    b.Navigation("UpdateUser");
                });

            modelBuilder.Entity("Core.Entities.SalesInvoicePayment", b =>
                {
                    b.HasOne("Core.Entities.SystemArchive", "Archive")
                        .WithMany("SalesInvoicePayments")
                        .HasForeignKey("ArchiveId")
                        .HasConstraintName("FK_SalesInvoicePayment_SystemArchive");

                    b.HasOne("Core.Entities.AppUser", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUserId")
                        .HasConstraintName("FK_SalesInvoicePayment_AspNetUsers")
                        .IsRequired();

                    b.HasOne("Core.Entities.SalesInvoice", "SalesInvoice")
                        .WithMany("SalesInvoicePayments")
                        .HasForeignKey("SalesInvoiceId")
                        .HasConstraintName("FK_SalesInvoicePayment_SalesInvoice")
                        .IsRequired();

                    b.HasOne("Core.Entities.AppUser", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId")
                        .HasConstraintName("FK_SalesInvoicePayment_AspNetUsers1")
                        .IsRequired();

                    b.Navigation("Archive");

                    b.Navigation("CreateUser");

                    b.Navigation("SalesInvoice");

                    b.Navigation("UpdateUser");
                });

            modelBuilder.Entity("Core.Entities.SalesInvoiceProduct", b =>
                {
                    b.HasOne("Core.Entities.Product", "Product")
                        .WithMany("SalesInvoiceProducts")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_SalesInvoiceProduct_Product");

                    b.HasOne("Core.Entities.SalesInvoice", "SalesInvoice")
                        .WithMany("SalesInvoiceProducts")
                        .HasForeignKey("SalesInvoiceId")
                        .HasConstraintName("FK_SalesInvoiceProduct_SalesInvoice")
                        .IsRequired();

                    b.HasOne("Core.Entities.Service", "Service")
                        .WithMany("SalesInvoiceProducts")
                        .HasForeignKey("ServiceId")
                        .HasConstraintName("FK_SalesInvoiceProduct_Service");

                    b.Navigation("Product");

                    b.Navigation("SalesInvoice");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Core.Entities.Service", b =>
                {
                    b.HasOne("Core.Entities.Category", "Category")
                        .WithMany("Services")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_Service_Category")
                        .IsRequired();

                    b.HasOne("Core.Entities.AppUser", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUserId")
                        .HasConstraintName("FK_Service_AspNetUsers")
                        .IsRequired();

                    b.HasOne("Core.Entities.AppUser", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId")
                        .HasConstraintName("FK_Service_AspNetUsers1")
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("CreateUser");

                    b.Navigation("UpdateUser");
                });

            modelBuilder.Entity("Core.Entities.Supplier", b =>
                {
                    b.HasOne("Core.Entities.City", "City")
                        .WithMany("Suppliers")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_Supplier_City")
                        .IsRequired();

                    b.HasOne("Core.Entities.AppUser", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUserId")
                        .HasConstraintName("FK_Supplier_AspNetUsers")
                        .IsRequired();

                    b.HasOne("Core.Entities.AppUser", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId")
                        .HasConstraintName("FK_Supplier_AspNetUsers1")
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("CreateUser");

                    b.Navigation("UpdateUser");
                });

            modelBuilder.Entity("Core.Entities.Category", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("Core.Entities.City", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("Suppliers");
                });

            modelBuilder.Entity("Core.Entities.Client", b =>
                {
                    b.Navigation("SalesInvoices");
                });

            modelBuilder.Entity("Core.Entities.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("Core.Entities.ExpenseType", b =>
                {
                    b.Navigation("Expenses");
                });

            modelBuilder.Entity("Core.Entities.Product", b =>
                {
                    b.Navigation("PurchaseInvoiceProducts");

                    b.Navigation("SalesInvoiceProducts");
                });

            modelBuilder.Entity("Core.Entities.PurchaseInvoice", b =>
                {
                    b.Navigation("PurchaseInvoicePayments");

                    b.Navigation("PurchaseInvoiceProducts");
                });

            modelBuilder.Entity("Core.Entities.SalesInvoice", b =>
                {
                    b.Navigation("SalesInvoicePayments");

                    b.Navigation("SalesInvoiceProducts");
                });

            modelBuilder.Entity("Core.Entities.Service", b =>
                {
                    b.Navigation("PurchaseInvoiceProducts");

                    b.Navigation("SalesInvoiceProducts");
                });

            modelBuilder.Entity("Core.Entities.Supplier", b =>
                {
                    b.Navigation("PurchaseInvoices");
                });

            modelBuilder.Entity("Core.Entities.SystemArchive", b =>
                {
                    b.Navigation("PurchaseInvoicePayments");

                    b.Navigation("PurchaseInvoices");

                    b.Navigation("SalesInvoicePayments");
                });
#pragma warning restore 612, 618
        }
    }
}
